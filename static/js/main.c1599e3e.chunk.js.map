{"version":3,"sources":["Components/NavigationBar/NavigationBar.js","Components/PageHome/PageHome.js","Components/PageProjects/PageProjects.js","Components/PageProjectDetail/PageProjectDetail.js","Components/PageError/PageError.js","Components/PageWork/PageWork.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["NavigationBar","this","props","pages","map","p","className","linkCategory","to","url","key","onClick","pageTransitionFunction","navText","React","Component","PageHome","state","socialLinks","name","transitionIn","console","log","history","Helmet","content","class","globalPages","id","link","href","target","rel","resumeURL","PageProjects","projects","project","sortId","shortText","suburl","PageProjectDetail","date","src","image","alt","longText","links","item","text","PageError","closestLocation","window","location","hash","substring","lastIndexOf","PageWork","work","workExperience","App","transitionOut","e","a","preventDefault","attributes","value","pathname","scrollTo","document","getElementsByTagName","style","opacity","title","i","j","innerText","length","Promise","r","setTimeout","push","pageHeading","currentPage","component","path","render","sort","p1","p2","filter","exact","withRouter","Boolean","hostname","match","ReactDOM","StrictMode","hashType","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c1599e3e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./NavigationBar.css\";\nimport { Link } from 'react-router-dom';\n\nclass NavigationBar extends React.Component {\n    render() {\n        return (\n            <nav>\n                {this.props.pages.map(p =>\n                    <Link className={p.linkCategory}\n                          to={p.url}\n                          key={p.url}\n                          onClick={this.props.pageTransitionFunction}>\n                        {p.navText}\n                    </Link>\n                )}\n            </nav>\n        );\n    }\n}\n\nexport default NavigationBar;","import React from \"react\";\nimport \"./PageHome.css\";\nimport { Helmet } from \"react-helmet\";\nimport NavigationBar from \"../NavigationBar/NavigationBar\";\n\nclass PageHome extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            socialLinks: [\n                {\n                    name: \"Onboard AI\",\n                    url: \"https://www.getonboard.dev/\"\n                },\n                {\n                    name: \"LinkedIn\",\n                    url: \"https://www.linkedin.com/in/vaishant/\"\n                },\n                {\n                    name: \"GitHub\",\n                    url: \"https://github.com/vkameswaran\"\n                },\n                {\n                    name: \"Email\",\n                    url: \"mailto:vaishant@getonboard.dev\"\n                },\n            ],\n            // resumeURL: \"https://drive.google.com/file/d/1JPzr5QKHKoLl__RuM1sMnWDM_o9R1z1-/view?usp=sharing\",\n        }\n    }\n\n    componentDidMount() {\n        this.props.transitionIn(\"Vaishant Kameswaran\")\n    }\n\n    render() {\n        console.log(this.props.history)\n        return (\n            <div className=\"home\">\n                <Helmet>\n                    <title>Vaishant Kameswaran</title>\n                    <meta name=\"description\" content=\"Vaishant Kameswaran is a computer scientist from Georgia Tech passionate about using technology to unlock human creativity.\" />\n                </Helmet>\n                <header className=\"navbar\">\n                    <div class=\"h1tag\">#</div>\n                    <h1>&nbsp;</h1>\n                    <NavigationBar pages={this.props.globalPages} pageTransitionFunction={this.props.pageTransitionFunction} />\n                </header>\n                <main>\n                        <p>\n                            I'm Vaishant, a computer scientist who recently graduated from the Georgia Institute of\n                            Technology. My degree focused on artificial intelligence and computing theory, with a minor\n                            in linguistics. I'm currently building a startup to simplify how people understand,\n                            navigate, integrate, and debug large codebases.\n                            <br/><br/>\n                            If you're interested in chatting, or learning more about me, send me an email!\n                        </p>\n\n                        <p id=\"socialLinks\">\n                        {this.state.socialLinks.map(link => <span key={link.name}><a href={link.url} target=\"_blank\"  rel=\"noopener noreferrer\">{link.name}</a></span>)}\n                        </p>\n\n                        {this.state.resumeURL\n                            && <p>Check out <a href={this.state.resumeURL} target=\"_blank\" rel=\"noopener noreferrer\">my resume</a>.</p>\n                        }\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default PageHome;","import React from \"react\";\nimport \"./PageProjects.css\";\nimport { Helmet } from \"react-helmet\";\nimport { Link } from \"react-router-dom\";\nimport NavigationBar from \"../NavigationBar/NavigationBar\";\n\nclass PageProjects extends React.Component {\n    componentDidMount() {\n        this.props.transitionIn(\"Projects\")\n    }\n\n    render() {\n        return (\n            <div className=\"projects\">\n                <Helmet>\n                    <title>Projects | Vaishant Kameswaran</title>\n                    <meta name=\"description\" content=\"Check out a gallery of some of my recent projects.\" />\n                </Helmet>\n                <header className=\"navbar\">\n                    <div className=\"h1tag\">#</div>\n                    <h1>&nbsp;</h1>\n                    <NavigationBar pages={this.props.globalPages} pageTransitionFunction={this.props.pageTransitionFunction} />\n                </header>\n                <main>\n                    <p>\n                        These projects are a selection of the things I've made over the years. In each of\n                        my projects, I try to explore new skills and learn about new technologies, in\n                        order to broaden my experiences and continue learning. Click through to read more\n                        about my experiences with each project.\n                    </p>\n                    {this.props.projects.map(project => (\n                        <div className=\"projectInfo\" key={project.sortId}>\n                            <div className=\"h2tag\">##</div>\n                            <h2>{project.name}</h2>\n                                <p>{project.shortText}</p>\n                            <Link to={\"/projects\" + project.suburl} onClick={this.props.pageTransitionFunction}>Read More\n                            </Link>\n                        </div>\n                    ))}\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default PageProjects;","import React from \"react\";\nimport \"./PageProjectDetail.css\";\nimport { Helmet } from \"react-helmet\";\nimport NavigationBar from \"../NavigationBar/NavigationBar\";\n\nclass PageProjectDetail extends React.Component {\n    componentDidMount() {\n        this.props.transitionIn(this.props.project.name)\n    }\n\n    render() {\n        return (\n            <div className=\"project\">\n                <Helmet>\n                    <title>{this.props.project.name + ' | Vaishant Kameswaran'}</title>\n                    <meta name=\"description\" content={this.props.project.shortText} />\n                </Helmet>\n                <header className=\"navbar\">\n                    <div className=\"h1tag\">#</div>\n                    <h1>&nbsp;</h1>\n                    <NavigationBar pages={this.props.globalPages} pageTransitionFunction={this.props.pageTransitionFunction} />\n                </header>\n                <main>\n                    <p className=\"tagline\"><strong>{this.props.project.date}</strong>. {this.props.project.shortText}</p>\n                    <img src={this.props.project.image} alt={this.props.project.name} />\n                    <p className=\"description\">{this.props.project.longText}</p>\n\n                    {this.props.project.links && <p className=\"links\">\n                        {this.props.project.links.map(item =>\n                        <span className=\"live\" key={item.link}>\n                            <a href={item.link} target=\"_blank\" rel=\"noopener noreferrer\">{item.text}</a>\n                        </span>)}\n                    </p>}\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default PageProjectDetail;","import React from \"react\";\nimport \"./PageError.css\";\nimport { Redirect } from 'react-router-dom';\n\nclass PageError extends React.Component {\n\n    render() {\n        const closestLocation = window.location.hash.substring(1, window.location.hash.lastIndexOf(\"/\"));\n        return (\n            <Redirect to={closestLocation} />\n        );\n    }\n}\n\nexport default PageError;","import React from \"react\";\nimport \"./PageWork.css\";\nimport { Helmet } from \"react-helmet\";\nimport NavigationBar from \"../NavigationBar/NavigationBar\";\n\nclass PageWork extends React.Component {\n    componentDidMount() {\n        this.props.transitionIn(\"Work\")\n    }\n\n    render() {\n        return (\n            <div className=\"work\">\n                <Helmet>\n                    <title>Work | Vaishant Kameswaran</title>\n                    <meta name=\"description\" content=\"Here's a brief summary of my work experience.\" />\n                </Helmet>\n                <header className=\"navbar\">\n                    <div className=\"h1tag\">#</div>\n                    <h1>&nbsp;</h1>\n                    <NavigationBar pages={this.props.globalPages} pageTransitionFunction={this.props.pageTransitionFunction} />\n                </header>\n                <main>\n                    <p>\n                        Building tech to change the world.\n                    </p>\n                    {this.props.work.map(workExperience => (\n                        <div className=\"workInfo\" key={workExperience.sortId}>\n                            <div className=\"h2tag\">##</div>\n                            <h2>{workExperience.name}</h2>\n                                <p>{workExperience.shortText}</p>\n                        </div>\n                    ))}\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default PageWork;","import React from 'react';\nimport './App.css';\nimport { Route, Switch, withRouter } from 'react-router-dom';\n\nimport PageHome from \"../PageHome/PageHome\";\nimport PageProjects from \"../PageProjects/PageProjects\";\nimport PageProjectDetail from \"../PageProjectDetail/PageProjectDetail\";\nimport PageError from \"../PageError/PageError\";\nimport PageWork from \"../PageWork/PageWork\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPage: \"Home\",\n            pages: [\n                {\n                    name: \"Home\",\n                    linkCategory: \"navlink\",\n                    navText: \"Home\",\n                    url: \"/\",\n                    component: PageHome\n                },\n                {\n                    name: \"Work\",\n                    linkCategory: \"navlink\",\n                    navText: \"Work\",\n                    url: \"/work\",\n                    component: PageWork,\n                },\n                {\n                    name: \"Projects\",\n                    linkCategory: \"navlink\",\n                    navText: \"Projects\",\n                    url: \"/projects\",\n                    component: PageProjects,\n                },\n            ],\n            projects: [\n            {\n                name: \"JukeBot\",\n                suburl: \"/jukebot\",\n                shortText: \"A dancing robot that reacts to music in its surroundings.\",\n                longText: \"Jukebot is a project I made with Jeff Raghav and Tiffany Yan during Hack&Roll 2017, the annual hackathon at the National University of Singapore. JukeBot is a robot that dances in response to music in its surroundings, and we built it using mBot, an Arduino, and assorted electronics. I personally coded the Arduino to coordinate input and output between the LED matrix and the microphone. I also soldered and wired the components. This taught me a lot about the Arduino platform and the associated circuitry since I had never really worked with these kinds of tools before. We ended up winning the prize for Most Entertaining Hack, and I had a great time!\",\n                image: \"/images/projects/jukebot.jpg\",\n                date: \"January 2017\",\n                sortId: \"20170101\",\n                links: [{\n                    link: \"https://devpost.com/software/84-jukebot\",\n                    text: \"See this project on Devpost\"\n                }],\n            },\n            {\n                name: \"Stonks\",\n                suburl: \"/stonks\",\n                shortText: \"An algorithm that predicts stock prices using social media.\",\n                longText: \"Stonks is a project I made with Daksh Gupta, Karthik Subramanian, and Wei Xiong Toh during Hacklytics 2020, a data science hackathon at Georgia Tech. We scraped subreddits relevant to particular companies and also obtained historical stock price data. We then processed this data and trained a machine learning model to predict the stock prices. I personally processed the language data from Reddit into sentiment vectors using SpaCy and compiled the final training data with Pandas. This was my first time working with language data, and my first time analyzing datasets on such a large scale. I learned a lot about language processing and practical real-world data science!\",\n                image: \"/images/projects/stonks.png\",\n                date: \"February 2020\",\n                sortId: \"20200201\",\n                links: [{\n                    link: \"https://devpost.com/software/stonks-i431j0\",\n                    text: \"See this project on Devpost\"\n                }, {\n                    link: \"https://github.com/karkir0003/Stonks\",\n                    text: \"See our code on GitHub\"\n                }],\n            },\n            {\n                name: \"Shopping Slots\",\n                suburl: \"/shopping-slots\",\n                shortText: \"A web app that checks for available grocery delivery slots.\",\n                longText: \"Shopping Slots is an app I put together after learning about React development on Codecademy. In Singapore, in these uncertain times, it can sometimes be difficult to get groceries delivered, since the availability of delivery slots seems to come and go at random. This app scrapes grocery websites periodically to notify the user when a slot opens up. I originally coded this in Python, but then rewrote it in JavaScript to make it available online. This was the first installable Progressive Web App I made entirely on my own using React, and I learned a lot about JavaScript development through this process.\",\n                image: \"/images/projects/shoppingslots.png\",\n                date: \"April 2020\",\n                sortId: \"20200401\",\n                links: [{\n                    link: \"https://shoppingslots.surge.sh/\",\n                    text: \"See this project live\"\n                }],\n            },\n            {\n                name: \"GT CourseBot\",\n                suburl: \"/coursebot\",\n                shortText: \"A dialog agent that finds Georgia Tech class prerequisites.\",\n                longText: \"This project started as a simple Python script that I wrote for myself, but I built it into a full-fledged dialog agent as part of a project for LING 4015. Course prerequisites at Georgia Tech can sometimes be difficult and time-consuming to locate online. However, with CourseBot, users can simply ask for the prerequisites of a Georgia Tech course using natural language, and get results back in a few seconds. The backend was written in Python (FastAPI and BeautifulSoup) and hosted using Heroku, and the dialog agent was developed and trained using Google DialogFlow. This was my first experience building a real-world dialog agent, even with a high-level tool like DialogFlow, meaning I had to learn about intents, entities, and how to establish conversational flows. This also allowed me to practice building and using APIs.\\n\",\n                image: \"/images/projects/coursebot.png\",\n                date: \"October 2020\",\n                sortId: \"20201001\",\n                links: [{\n                    link: \"https://gtcoursebot.surge.sh/\",\n                    text: \"See this project live\"\n                }],\n            },\n            {\n                name: \"Movie Suggestions\",\n                suburl: \"/movie-suggestions\",\n                shortText: \"A series of short Python scripts to search a movie dataset.\",\n                longText: \"This project was a small experiment I worked on during the summer of 2020. I found a movie dataset online, and wanted to use it to build something useful and interesting. I wrote a few different scripts to process and search the dataset. Perhaps the most useful feature I created is the ability to enter a movie's name, and return other 'similar' movies, based on the actors and crew members that worked on it. I wrote everything in Python, using the pandas and json packages. This project helped me gain more experience working with pandas, and manipulating datasets in Python.\\n\",\n                image: \"/images/projects/movie_suggestions.png\",\n                date: \"July 2020\",\n                sortId: \"20200701\",\n                links: [{\n                    link: \"https://github.com/vkameswaran/movie_suggestions\",\n                    text: \"See my code on GitHub\"\n                }],\n            },\n        ],\n            work: [\n                {\n                    name: \"Data Science Intern @ McLaren Applied Technologies\",\n                    sortId: \"20170601\",\n                    shortText: \"Validated, standardized, and formatted client datasets, using Microsoft Excel, to allow further analysis by the data science team. Handled data used in public transport and healthcare research.\"\n                },\n                {\n                    name: \"Undergrad TA @ Georgia Tech\",\n                    sortId: \"20200501\",\n                    shortText: \"TA for Data Structures and Algorithms. Held weekly office hours, reviewed exams and homework assignments, corrected homework submissions, and worked with other TAs to answer student questions on Piazza.\"\n                },\n                {\n                    name: \"Data Scientist @ Mentra\",\n                    sortId: \"20201201\",\n                    shortText: \"Worked in a small data science team to explore natural language data, build classification models, and create algorithms to match neurodiverse candidates to jobs. Used Python packages such as Pandas, NumPy, and scikit-learn. Interviewed, recruited, and managed student volunteers on campus.\"\n                },\n                {\n                    name: \"SDE 1 Intern @ Amazon\",\n                    sortId: \"20210601\",\n                    shortText: \"Designed and implemented internal tools, built on AWS, to support the operations of a confidential project. Analyzed different design options to arrive at the optimal choice, weighing simplicity and future extensibility. Learned to write code in Kotlin, and gained experience designing, implementing, and testing code within a large company. Received a return offer.\"\n                },\n                {\n                    name: \"SWE Intern @ HubSpot\",\n                    sortId: \"20220601\",\n                    shortText: \"Worked on the team responsible for the availability and dynamic rendering of webpages hosted on HubSpot’s CMS. Learned about Kafka, Cloudflare Workers, Jinja templates, and the design of large-scale systems serving hundreds of millions of requests per day. Implemented new features and wrote tests in Java.\"\n                },\n                {\n                    name: \"Co-Founder @ Onboard AI (YC W24)\",\n                    sortId: \"20230501\",\n                    shortText: \"I'm currently building a startup to simplify how people understand, navigate, integrate, and debug large codebases.\"\n                }\n            ]\n        }\n    }\n\n    transitionOut = async (e) => {\n        e.preventDefault();\n        let url = e.target.attributes[\"href\"].value.substring(2);\n\n        // If we are navigating to the same page, don't do the animation\n        if(this.props.history.location.pathname.substring(1) === url) {\n            return\n        }\n\n        window.scrollTo(0, 0);\n        let pageContents = document.getElementsByTagName(\"main\")[0];\n        pageContents.style.opacity = 0;\n\n        let title = document.getElementsByTagName(\"h1\")[0];\n        for(let i = 0, j = title.innerText.length; i < j; i++) {\n            title.innerText = title.innerText.substring(0, title.innerText.length - 1) || '\\xa0';\n            await new Promise(r => setTimeout(r, 500/j));\n        }\n\n        this.props.history.push(\"/\" + url)\n    };\n\n    transitionIn = async (pageHeading) => {\n        let title = document.getElementsByTagName(\"h1\")[0];\n        for(let i = 0, j = pageHeading.length; i <= j; i++) {\n            title.innerText = pageHeading.substring(0, i) || '\\xa0';\n            await new Promise(r => setTimeout(r, 500/j));\n        }\n\n        let pageContents = document.getElementsByTagName(\"main\")[0];\n        pageContents.style.opacity = 1\n    };\n\n  render() {\n      return (\n          <div className=\"app\">\n              <Switch>\n\n                  {/* Path to pages */}\n                  {this.state.pages.map(p =>\n                      <Route\n                          path={p.url}\n                          render={\n                              () => (<p.component\n                                  projects={(p.name === \"Projects\") && this.state.projects.sort((p1, p2) => p2.sortId - p1.sortId)}\n                                  work={(p.name === \"Work\") && this.state.work.sort((p1, p2) => p2.sortId - p1.sortId)}\n                                  globalPages={this.state.pages.filter(p => p.linkCategory !== \"none\")}\n                                  pageTransitionFunction={this.transitionOut}\n                                  transitionIn={this.transitionIn}\n                              />)}\n                          exact\n                          key={p.name}\n                      />)}\n\n                  {/* Path to projects */}\n                  {this.state.projects.map(p =>\n                      <Route\n                          path={\"/projects\" + p.suburl}\n                          render={() => <PageProjectDetail\n                              project={p}\n                              globalPages={this.state.pages.filter(p => p.linkCategory !== \"none\")}\n                              pageTransitionFunction={this.transitionOut}\n                              transitionIn={this.transitionIn}\n                          />}\n                          exact\n                          key={p.name}\n                      />)\n                  }\n\n                  {/* Catch other paths (404) */}\n                  <Route component={PageError} />\n\n              </Switch>\n          </div>\n      );\n  }\n\n}\n\nexport default withRouter(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport { HashRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <HashRouter hashType=\"slash\">\n          <App />\n      </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}